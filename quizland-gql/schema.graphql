scalar DateTime
scalar Void


# directives are resolved with graphql-tools
# https://the-guild.dev/graphql/tools/docs/schema-directives

# todo dynamic Query and Mutation permissions resolving
# currently query and mutation are statically resolver

# permitted can be used on Folder, CardSet, Group
directive @permitted (required: Permission) on FIELD_DEFINITION | QUERY | MUTATION # available only for user with permission
directive @private on FIELD_DEFINITION | QUERY # visible only to the related user and superusers
directive @server on FIELD_DEFINITION | QUERY | MUTATION | OBJECT # only for server side
directive @internal on FIELD_DEFINITION | OBJECT | ENUM # only for internal usage eg. data structure, only relevant for database and type generation

type Query {
    # users
    # getUsers: [User] @server
    getUserByID(id: ID!): User
    getUserByEmail(email: String!): User
    getUserByAccount(providerAccountId: ID!, provider: ProviderType!): User @server
    getUser: User

    # auth
    checkToken: CheckTokenPayload


    # cardSets
    getItem(id: ID!): ItemPayload @permitted(required: R)

    getCardSet(id: ID!): CardSet @permitted(required: R)

    discoverCardSets: [ID!] @server

    searchCardSets(query: String!): [CardSet!]!
    fetchCardSets: [ItemPayload!]!
}

type Mutation {
    # users
    # createUser(input: CreateUserInput!): User @server
    # updateUser(input: UpdateUserInput!): User @private
    deleteUser(id: ID!): Void @server
    # closeAccount: Void @private

    authenticateUser(provider: ProviderType!, code: String!): AuthenticateUserPayload

    # accounts
    # connectAccount(provider: ProviderType!, code: String!): Void @private

    # auth

    # items
    # items cannot be created directly, only through its implementation, eg. CardSet, Folder
    deleteItem(id: ID!): Boolean @permitted(required: M) # delete item and all its children, shared folders, card sets, etc.
    updateItem(id: ID!, name: String, description: String): Void @permitted(required: M)

    updatePermission(id: ID!, user: ID!): Boolean @permitted(required: M) # update/delete

    checkPermission(id: ID!, user: ID!): Permission

    # folders
    createFolder(parent: ID, name: String!, description: String): Folder @permitted(required: M)
    # moveItem(id: ID!, from: ID!, to: ID!): Boolean @permitted(required: M)

    # cardSets
    createCardSet(
        cards: [CardInput!]!
        folder: ID
        name: String!
        description: String
        permissions: [PermitInput!]
    ): CardSet @permitted(required: M)

    # if index not specified, add to the end
    # addCard(cardSet: ID!, index: Int, card: CardInput!): CardSet @permitted(required: W)
    # updateCard(cardSet: ID!, index: Int!, card: CardInput!): CardSet @permitted(required: W)
    # removeCard(cardSet: ID!, index: Int!): CardSet @permitted(required: W)
    updateCards(id: ID!, cards: [CardInput!]!): CardSet @permitted(required: W)

}

type AuthenticateUserPayload {
    user: User!
    token: String!
    expiresAt: DateTime!
}

type CheckTokenPayload {
    token: String
    expiresAt: DateTime!
}

#input UpdateUserInput {
#    id: ID!
#    name: String
#    email: String
#    image: String
#    emailVerified: Boolean @server
#}

input CreateUserInput {
    email: String!
    name: String!
    image: String
}

input CardInput {
    term: String!
    definition: [String!]!
}

input AddCardInput {
    id: ID! # CardSet id
    index: Int!
    card: CardInput!
}

input RemoveCardInput {
    id: ID! # CardSet id
    index: Int!
}

enum Permission {
    R   # read
    W   # read and write
    M   # manage (read, write, delete, change permissions, etc.)
}

enum ProviderType {
    GOOGLE
    FACEBOOK
    GITHUB
    TWITTER
    LINKEDIN
    INSTAGRAM
    DISCORD
    EMAIL
}

enum Role {
    ADMIN
    USER
    SERVER
}

interface Permit {
    user: ID
    group: ID
    permission: Permission!
}

input PermitInput {
    user: ID
    group: ID
    permission: Permission!
}

interface Item {
    id: ID!
    name: String!
    description: String
    owner: User!
    permissions: [Permit!] @permitted(required: M)
    modified: DateTime
}

type ItemPayload {
    id: ID!
    name: String!
    description: String
    owner: User!
    permissions: [Permit!] @permitted(required: M)
    modified: DateTime
}

type Card @internal {
    term: String!
    definition: [String!]!
}

type CardSet implements Item {
    id: ID!
    name: String!
    description: String
    owner: User!
    permissions: [Permit!] @permitted(required: M)
    cards: [Card!]!
    termLng: String
    definitionLng: String
    modified: DateTime

}

fragment CardSetFragment on CardSet {
    id
    name
    description
    owner {
        id
        username
        image
    }
    permissions {
        user
        permission
    }
    cards {
        term
        definition
    }
    modified
}

type Folder implements Item {
    id: ID!
    name: String!
    description: String
    owner: User!
    permissions: [Permit!] @permitted(required: M)
    children: [Item] @permitted(required: R)
    modified: DateTime
}

type Account @server {
    user: User
    provider: ProviderType
    providerAccountId: String # for google is sub

    #    accessToken: String
    #    refreshToken: String
    #    expiresAt: DateTime
    # main usage for google oauth
    # https://developers.google.com/identity/openid-connect/openid-connect
}

type User {
    id: ID
    username: String
    surname: String @private
    lastname: String @private
    email: String!
    image: String
    role: Role @server
}

type Group {
    id: ID
    name: String!
    owner: User
    members: [User] @permitted(required: R)
    modified: DateTime
}

fragment ItemFragment on Item {
    id
    name
    description
    owner {
        id
        username
    }
    permissions {
        user
        permission
    }
    modified
}

# on client can be resolved by __typename
enum ItemType @internal {
    FOLDER
    CARD_SET
}