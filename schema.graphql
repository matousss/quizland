scalar DateTime
scalar Void

directive @permitted (required: Permission) on FIELD_DEFINITION
directive @private on FIELD_DEFINITION | QUERY # visible only to user who owns the item
directive @server on FIELD_DEFINITION | QUERY | MUTATION | OBJECT | INPUT_FIELD_DEFINITION # only for server side
directive @internal on FIELD_DEFINITION | OBJECT # only for internal usage eg. data structure, only relevant for database

type Query {
    getUsers: [User] @server
    getUserByID(id: ID!): User
    getUserByEmail(email: String!): User
    getUserByAccount(providerAccountId: ID!, provider: ProviderType!): User @server

    getCardSet(id: ID!): CardSet

}

type Mutation {
    # users
    createUser(input: CreateUserInput!): User
    updateUser(input: UpdateUserInput!): User @private
    deleteUser(id: ID!): Void @private

    # accounts

    # auth
    authenticateUser(input: AuthenticateUserInput): VerificationToken


    # cardSets
    createCardSet(input: CreateCardSetInput): Boolean
    removeCardSet(input: RemoveCardSetInput): Boolean
    addCard(input: AddCardInput): Boolean
    removeCard(input: RemoveCardInput): Boolean
}

input AuthenticateUserInput {
    provider: ProviderType!
    secret: String!
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    image: String
    emailVerified: DateTime @server
}

input CreateUserInput {
    email: String!
    name: String!
    image: String
}

input CreateCardSetInput {
    cards: [CardInput]
}

input RemoveCardSetInput {
    id: ID!
}

input CardInput {
    term: String!
    definition: [String!]!
}

input AddCardInput {
    id: ID! # CardSet id
    index: Int!
    card: CardInput!
}

input RemoveCardInput {
    id: ID! # CardSet id
    index: Int!
}

enum Permission {
    R   # read
    RW  # read and write
    M   # manage (read, write, delete, change permissions, etc.)
}

enum ProviderType {
    GOOGLE
    FACEBOOK
    GITHUB
    TWITTER
    LINKEDIN
    INSTAGRAM
    DISCORD
    EMAIL
}

interface Permit {
    user(id: ID!): User
    permission: Permission
}

interface Item {
    id: ID
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!] @permitted(required: M)
}

type Card @internal {
    term: String
    definition: [String]
}

type CardSet implements Item {
    id: ID
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!] @permitted(required: M)
    cards: [Card!]!
}

type Folder implements Item {
    id: ID
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!] @permitted(required: M)
    children: [Item] @permitted(required: R)
}

type Account @server {
    user(id: ID!): User
    provider: ProviderType
    providerAccountId: String
    refreshToken: String
    expires_at: DateTime
    accessToken: String
    token_type: String
    refresh_token: String
    access_token: String
    scope: String
    id_token: String
    session_state: String

}

type User {
    id: ID
    name: String @private
    email: String!
    emailVerified: DateTime @server
    #image: String
    accounts: [Account] @private
    tokens: [VerificationToken] @server
}

type VerificationToken @server {
    token: String
    expires: DateTime
}
