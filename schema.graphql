scalar DateTime

type Query {
    getUsers: [User]
    getUserID(id: ID!): User
    getUserEmail(email: String!): User
}

enum Permission {
    R
    RW
    M
}

interface Permit {
    user(id: ID!): User
    permission: Permission
}

interface Item {
    id: ID!
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!]
}

type Card {
    term: String
    definition: [String]
}
type CardSet implements Item {
    id: ID!
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!]
    cards: [Card!]!
}

type Folder implements Item {
    id: ID!
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!]
    children: [Item]
}

type Account {
    id: ID
    type: String
    provider: String
    providerAccountId: String
    refreshToken: String
    expires_at: DateTime
    accessToken: String
    token_type: String
    refresh_token: String
    access_token: String
    scope: String
    id_token: String
    session_state: String
    user: User
}
type Session{
    id: ID
    expires: DateTime
    sessionToken: String
    user: User
}
type User {
    id: ID
    name: String
    email: String
    emailVerified: DateTime
    image: String
    accounts: [Account]
    sessions: [Session]
}

type VerificationToken {
    id: ID
    identifier: String
    token: String
    expires: DateTime
}
