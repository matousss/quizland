scalar DateTime

type Query {
    getUsers: [User]
    getUserByID(id: ID!): User
    getUserByEmail(email: String!): User
    getUserByAccount(providerAccountId: ID!, provider: Provider!): User
}

type Mutation {
    createUser(input: CreateUserInput!): User
    updateUser(input: UpdateUserInput!): User
    deleteUser(id: ID!): User
}

input UpdateUserInput {
    id: ID!
    name: String
    email: String
    image: String
    emailVerified: DateTime
}

input CreateUserInput {
    email: String!
    name: String!
    image: String
    emailVerified: DateTime
}

enum Permission {
    R
    RW
    M
}

enum Provider {
    GOOGLE
    FACEBOOK
    GITHUB
    TWITTER
    LINKEDIN
    INSTAGRAM
    DISCORD
    EMAIL
}

interface Permit {
    user(id: ID!): User
    permission: Permission
}

interface Item {
    id: ID!
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!]
}

type Card {
    term: String
    definition: [String]
}
type CardSet implements Item {
    id: ID!
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!]
    cards: [Card!]!
}

type Folder implements Item {
    id: ID!
    name: String!
    description: String
    owner(id: ID!): User
    permissions: [Permit!]
    children: [Item]
}

type Account {
    type: String
    provider: Provider
    providerAccountId: String
    refreshToken: String
    expires_at: DateTime
    accessToken: String
    token_type: String
    refresh_token: String
    access_token: String
    scope: String
    id_token: String
    session_state: String
    user: User
}
type Session{
    expires: DateTime
    sessionToken: String
    user: User
}
type User {
    id: ID
    name: String
    email: String
    emailVerified: DateTime
    image: String
    accounts: [Account]
    sessions: [Session]
}

type VerificationToken {
    identifier: String
    token: String
    expires: DateTime
}
